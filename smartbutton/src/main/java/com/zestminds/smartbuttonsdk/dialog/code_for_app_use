




    /////////////////code for app

    private var mBluetoothLeService: BluetoothLeService?=null
    private var mDeviceAddress:String?=null
    private var mConnected = false
    private var mConnectionState: TextView?=null

    private val mServiceConnection = object: ServiceConnection {
        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
        override fun onServiceConnected(componentName: ComponentName, service: IBinder) {
            mBluetoothLeService = (service as BluetoothLeService.LocalBinder).service
            if (!mBluetoothLeService?.initialize()!!)
            {
                Log.e("TAG", "Unable to initialize Bluetooth")
                finish()
            }
            // Automatically connects to the device upon successful start-up initialization.
            mBluetoothLeService?.connect(mDeviceAddress!!)
        }
        override fun onServiceDisconnected(componentName: ComponentName) {
            mBluetoothLeService = null
        }
    }

    // Handles various events fired by the Service.
    // ACTION_GATT_CONNECTED: connected to a GATT server.
    // ACTION_GATT_DISCONNECTED: disconnected from a GATT server.
    // ACTION_GATT_SERVICES_DISCOVERED: discovered GATT services.
    // ACTION_DATA_AVAILABLE: received data from the device. This can be a result of read
    // or notification operations.
    private val mGattUpdateReceiver = object: BroadcastReceiver() {
        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
        override fun onReceive(context: Context, intent: Intent) {
            val action = intent.action
            when {
                BluetoothLeService.ACTION_GATT_CONNECTED.equals(action) -> {
                    mConnected = true
                    updateConnectionState(R.string.connected)
                    invalidateOptionsMenu()
                }
                BluetoothLeService.ACTION_GATT_DISCONNECTED.equals(action) -> {
                    mConnected = false
                    updateConnectionState(R.string.disconnected)
                    invalidateOptionsMenu()
                    clearUI()
                }
                BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED.equals(action) -> {
                    // Show all the supported services and characteristics on the user interface.
                    displayGattServices(mBluetoothLeService?.supportedGattServices!!)
                }
                BluetoothLeService.ACTION_DATA_AVAILABLE.equals(action) -> {
                    intent.getStringExtra(BluetoothLeService.EXTRA_DATA)?.let { displayData(it) }
                }
            }
        }
    }

    private fun updateConnectionState(resourceId:Int) {
        runOnUiThread { mConnectionState?.setText(resourceId) }
    }

    private fun displayData(data:String) {
        if (data != null)
        {
         //   mDataField?.text = data
            //  readtempData()
        }
    }

    private var listGattCharacteristics = ArrayList<ArrayList<BluetoothGattCharacteristic>>()
    private val LIST_NAME = "NAME"
    private val LIST_UUID = "UUID"
    @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
    private fun displayGattServices(gattServices:List<BluetoothGattService>?) {
        if (gattServices == null) return
        var uuid:String? = null
        val unknownServiceString = resources.getString(R.string.unknown_service)
        val unknownCharaString = resources.getString(R.string.unknown_characteristic)
        val gattServiceData = ArrayList<HashMap<String, String>>()
        val gattCharacteristicData = ArrayList<ArrayList<HashMap<String, String>>>()
        listGattCharacteristics = ArrayList<ArrayList<BluetoothGattCharacteristic>>()
        // Loops through available GATT Services.
        for (gattService in gattServices)
        {
            val currentServiceData = HashMap<String, String>()

            uuid = gattService.uuid.toString()

//            currentServiceData.put(
//                LIST_NAME,readData( gattService.getCharacteristic(gattService.uuid))
//            )
            currentServiceData.put(
                LIST_NAME, SampleGattAttributes.lookup(uuid, unknownServiceString).toString()
            )
            currentServiceData.put(LIST_UUID, uuid)
            gattServiceData.add(currentServiceData)
            val gattCharacteristicGroupData = ArrayList<HashMap<String, String>>()
            val gattCharacteristics = gattService.characteristics
            val charas = ArrayList<BluetoothGattCharacteristic>()
            // Loops through available Characteristics.
            for (gattCharacteristic in gattCharacteristics)
            {

                charas.add(gattCharacteristic)
                val currentCharaData = HashMap<String, String>()
                uuid = gattCharacteristic.uuid.toString()

                if (gattCharacteristic.value!=null)
                    currentServiceData[LIST_NAME] = readData( gattCharacteristic)
                else {
                    currentCharaData[LIST_NAME] = SampleGattAttributes.lookup(uuid, unknownCharaString).toString()
                }
                if (SampleGattAttributes.lookup(uuid,unknownCharaString).toString().equals("Audio_Data",true))
                {

                }
                currentCharaData.put(LIST_UUID, uuid)
                gattCharacteristicGroupData.add(currentCharaData)
            }
            listGattCharacteristics.add(charas)
            gattCharacteristicData.add(gattCharacteristicGroupData)
        }
        val gattServiceAdapter = SimpleExpandableListAdapter(
            this,
            gattServiceData,
            android.R.layout.simple_expandable_list_item_2,
            arrayOf<String>(LIST_NAME, LIST_UUID),
            intArrayOf(android.R.id.text1, android.R.id.text2),
            gattCharacteristicData,
            android.R.layout.simple_expandable_list_item_2,
            arrayOf<String>(LIST_NAME, LIST_UUID),
            intArrayOf(android.R.id.text1, android.R.id.text2)
        )
      //  expandablelist?.setAdapter(gattServiceAdapter)
    }

    @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
    private fun readData(characteristic:BluetoothGattCharacteristic) :String{
        val data = characteristic.value
        return String(data)
    }

    private fun clearUI() {
//        expandablelist?.setAdapter(null as SimpleExpandableListAdapter?)
//        mDataField?.setText(R.string.no_data)
    }